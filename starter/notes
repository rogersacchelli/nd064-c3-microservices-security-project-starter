# Docker Hardening

Stride Model:

```shell
# 1. Build Docker file
docker build . -t opensuse/leap:latest

# 2. Fix 5.10 - Prevent Denial of Service
docker build . -t opensuse/leap:latest  -m 256mb --no-cache=true 

# 1.1.2 - Ensure auditing is configured for Docker files and directories - OK - Non Repudiation

# 2.2.b - Ensure Log Leval is set to Info - Tampering
deamon.json

# 2.17.b Containers are restricted from aquiring new privilegies - Privilegie Scalation

```

# Kubernetes Hardening

## Control Plane
```shell

# Start kube-bench container on cluster
docker run --pid=host -v /etc:/node/etc:ro -v /var:/node/var:ro -ti rancher/security-scan:v0.2.2 bash

# Run kube for Control Plane
kube-bench run --targets etcd,master,controlplane,policies --scored --config-dir=/etc/kube-bench/cfg --benchmark rke-cis-1.6-hardened | grep FAIL

# [FAIL] 1.1.12 Ensure that the etcd data directory ownership is set to etcd:etcd (Automated)
groupadd --gid 52034 etcd
useradd --comment "etcd service account" --uid 52034 --gid 52034 etcd
chown etcd:etcd /var/lib/etcd

docker run --pid=host -v /etc/passwd:/etc/passwd -v /etc/group:/etc/group -v /etc:/node/etc:ro -v /var:/node/var:ro -ti rancher/security-scan:v0.2.2 bash

kube-bench run --targets etcd --scored --config-dir=/etc/kube-bench/cfg --benchmark rke-cis-1.6-hardened | grep FAIL


```

# App

```shell
AIOHTTP_SESSION 214db7397b9648c1ac23d1e428531a02

aiohttp  3.5.3      3.8.5     python  GHSA-45c4-8wx5-qw6w  Medium
aiohttp  3.5.3      3.7.4     python  GHSA-v6wp-4m6f-gcjg  Low
jinja2   2.10       2.10.1    python  GHSA-462w-v97r-4m45  High
jinja2   2.10       2.11.3    python  GHSA-g3rq-g295-4j3m  Medium
pyyaml   3.13       4.1       python  GHSA-rprw-h62v-c2w7  Critical
pyyaml   3.13       5.4       python  GHSA-8q59-q68h-6hv4  Critical
pyyaml   3.13       5.3.1     python  GHSA-6757-jp84-gxfx  Critical


```

# Runtime Monitoring

```shell

# Install Falco
rpm --import https://falco.org/repo/falcosecurity-3672BA8F.asc
## Curl the falco repo containing the drivers
curl -s -o /etc/zypp/repos.d/falcosecurity.repo https://falco.org/repo/falcosecurity-rpm.repo 
## Install the drivers
## Hit "y" at this prompt to install all relevant packages. 
sudo zypper dist-upgrade
## This command will take up to 10 mins to execute
sudo zypper -n install kernel-default-devel
sudo zypper -n install falco
## Verify the installation
systemctl status falco-kmod.service
systemctl start falco-kmod.service

helm repo add falcosecurity https://falcosecurity.github.io/charts
## Update the Helm repo to get the latest charts
helm repo update
## Falco deployment
helm install --kubeconfig kube_config_cluster.yml falco falcosecurity/falco --namespace falco --create-namespace --set falco.grpc.enabled=true --set falco.grpc_output.enabled=true

helm list --kubeconfig kube_config_cluster.yml --all --all-namespaces
helm uninstall falco --kubeconfig kube_config_cluster.yml  --namespace falco

# Lastly, run the following command to make sure that the Falco service account has been created. The service account is mandatory for Falco to operate.

kubectl get ds falco --namespace falco -o yaml | grep serviceAcc

localhost:~ # kubectl get ds falco --namespace falco -o yaml | grep serviceAcc
      serviceAccount: falco
      serviceAccountName: falco

## Install the CustomResourceDefinition resources separately
kubectl apply --kubeconfig $KUBECONFIG  --validate=false -f https://github.com/cert-manager/cert-manager/releases/download/v1.3.1/cert-manager.yaml  
## Add the Jetstack Helm repository
helm repo add jetstack https://charts.jetstack.io
helm repo update
## Install the cert-manager Helm chart
helm install --kubeconfig $KUBECONFIG cert-manager jetstack/cert-manager  --namespace cert-manager --create-namespace --version v1.3.1

# Falco Exporter
helm repo update
helm install --kubeconfig $KUBECONFIG falco-exporter --namespace falco --set serviceMonitor.enabled=true falcosecurity/falco-exporter

#NOTES:
#Get the falco-exporter metrics URL by running these commands:
#  export POD_NAME=$(kubectl get pods --namespace falco -l "app.kubernetes.io/name=falco-exporter,app.kubernetes.io/instance=falco-exporter" -o jsonpath="{.items[0].metadata.name}")
#  echo "Visit http://127.0.0.1:9376/metrics to use your application"
#  kubectl port-forward --namespace falco $POD_NAME 9376
#  echo

# Port Forwad service
kubectl --kubeconfig $KUBECONFIG --namespace monitoring  port-forward kube-prometheus-stack-1670914524-grafana-87678fb8d-7nc7x 3000

```